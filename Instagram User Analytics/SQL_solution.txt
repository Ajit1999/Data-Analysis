1) Rewarding Most Loyal Users: People who have been using the platform for the longest time.
Your Task: Find the 5 oldest users of the Instagram from the database provided

>>> select id, username from users order by created_at limit 5;


2) Remind Inactive Users to Start Posting: By sending them promotional emails to post their 1st photo.
Your Task: Find the users who have never posted a single photo on Instagram

>>> SELECT   users.id, users.username FROM users LEFT JOIN photos ON users.id=photos.user_id WHERE photos.id IS NULL;


3) Declaring Contest Winner: The team started a contest and the user who gets the most likes on a single photo will win the contest now they wish to declare the winner.
Your Task: Identify the winner of the contest and provide their details to the team

>>>select users.id as ID, users.username as UserName ,likes.photo_id as PhotoID, COUNT(photo_id) as TotalLike from users 
   join photos on users.id = photos.user_id
   join likes on  photos.id = likes.photo_id
   GROUP BY photo_id ORDER BY TotalLike desc limit 1;


4) Hashtag Researching: A partner brand wants to know, which hashtags to use in the post to reach the most people on the platform.
Your Task: Identify and suggest the top 5 most commonly used hashtags on the platform

>>>select  tags.tag_name as Tag, COUNT(tag_id) as Most_Use_Tag from tags 
   join photo_tags on tags.id = photo_tags.tag_id
   GROUP BY tag_id
   ORDER BY Most_Use_Tag desc limit 5;


5) Launch AD Campaign: The team wants to know, which day would be the best day to launch ADs.
Your Task: What day of the week do most users register on? Provide insights on when to schedule an ad campaign

select WEEKDAY(created_at) as weekday, count(username) as reg_user from ig_clone.users
group by 1 order by 2 desc;


6) User Engagement: Are users still as active and post on Instagram or they are making fewer posts
Your Task: Provide how many times does average user posts on Instagram. Also, provide the total number of photos on Instagram/total number of users

WITH cte as(
select u.id as userid, count(p.id) as photoid
from ig_clone.users u
left join ig_clone.photos p on u.id = p.user_id
group by u.id )
select sum(photoid)/count(userid) as post_per_user
from cte where photoid > 0;


7) Bots & Fake Accounts: The investors want to know if the platform is crowded with fake and dummy accounts
Your Task: Provide data on users (bots) who have liked every single photo on the site (since any normal user would not be able to do this).

WITH photo_account as(
select user_id as UserId, count(photo_id) as Likes_number
from ig_clone.likes
group by user_id  
order by Likes_number desc )
select * from photo_account  
where Likes_number = (select count(*) from ig_clone.photos) ;
